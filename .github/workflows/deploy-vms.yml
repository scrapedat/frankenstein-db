name: Deploy FrankensteinDB to Production VMs

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main, production ]
  workflow_dispatch:

env:
  REDIS_HOST: localhost
  REDIS_PORT: 6379

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install and start Redis
      run: |
        sudo apt update
        sudo apt install -y redis-server
        sudo systemctl start redis-server
        sudo systemctl enable redis-server
        # Wait for Redis to be ready
        for i in {1..10}; do
          if redis-cli ping | grep -q PONG; then
            echo "Redis is ready"
            break
          fi
          echo "Waiting for Redis... ($i/10)"
          sleep 2
        done

    - name: Run basic functionality test
      run: |
        cd examples
        python basic_usage.py

    - name: Run comprehensive DB tests
      run: |
        python -c "
        import asyncio
        import time
        from src import FrankensteinDB

        async def comprehensive_test():
            print('🧪 Running comprehensive FrankensteinDB tests...')
            db = FrankensteinDB()

            # Test 1: Basic health check
            health = await db.get_system_health()
            print(f'✅ Health check: {health[\"components\"]}')

            # Test 2: Store test data
            test_html = '<html><head><title>Test</title></head><body><h1>Hello</h1></body></html>'
            test_fingerprint = {
                'page_type': 'test',
                'framework_signatures': ['test'],
                'element_counts': {'div': 1},
                'accessibility_features': ['semantic_html'],
                'performance_hints': {'image_count': 0}
            }

            dna = await db.store_website_snapshot(
                'https://test.example.com',
                test_html,
                test_fingerprint,
                user_context='test_user',
                keywords=['test', 'example']
            )
            print(f'✅ Stored test DNA: {dna.structure_hash[:8]}...')

            # Test 3: Query evolution
            evolution = await db.query_website_evolution('test.example.com')
            print(f'✅ Evolution query: {len(evolution)} snapshots')

            # Test 4: Search functionality
            results = await db.search_websites('test', limit=5)
            print(f'✅ Search test: {len(results)} results')

            # Test 5: User context storage
            await db.store_user_session('test_user', {
                'ai_knowledge': {'learned_patterns': ['test_pattern']},
                'scraping_logic': {'selectors': ['.content']},
                'session_data': {'start_time': time.time()}
            })
            context = await db.get_user_context('test_user')
            print(f'✅ User context: {bool(context)}')

            # Test 6: Content caching
            cached = await db.get_cached_content('https://test.example.com')
            print(f'✅ Content caching: {len(cached) if cached else 0} chars')

            await db.close()
            print('🎉 All tests passed!')

        asyncio.run(comprehensive_test())
        "

    - name: Test Redis multi-database support
      run: |
        python -c "
        import redis
        import json

        # Test multiple Redis databases for different data types
        dbs = {
            0: 'user_contexts',
            1: 'ai_knowledge',
            2: 'scraping_logic',
            3: 'website_dna_cache',
            4: 'session_data'
        }

        for db_num, db_name in dbs.items():
            try:
                r = redis.Redis(db=db_num)
                r.ping()
                # Store test data
                test_key = f'test:{db_name}'
                test_data = {'type': db_name, 'test': True, 'timestamp': time.time()}
                r.setex(test_key, 300, json.dumps(test_data))
                print(f'✅ Redis DB {db_num} ({db_name}): OK')
            except Exception as e:
                print(f'❌ Redis DB {db_num} ({db_name}): {e}')
        "

    - name: Generate test report
      run: |
        echo '## FrankensteinDB Test Report' > test_report.md
        echo '- ✅ Basic functionality test completed' >> test_report.md
        echo '- ✅ Comprehensive DB tests passed' >> test_report.md
        echo '- ✅ Redis multi-database support verified' >> test_report.md
        echo '- ✅ All components healthy' >> test_report.md
        cat test_report.md

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: test_report.md

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo '${{ secrets.VM_SSH_KEY }}' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to production VMs
      run: |
        # Deploy FrankensteinDB to production VMs
        echo '🚀 Starting production deployment...'

        # Install Redis on VM
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} '
          sudo apt update &&
          sudo apt install -y redis-server python3 python3-pip &&
          sudo systemctl start redis-server &&
          sudo systemctl enable redis-server
        '

        # Deploy application code
        scp -r . ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/frankenstein-db/

        # Install dependencies on VM
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} '
          cd ~/frankenstein-db &&
          pip3 install -r requirements.txt
        '

        # Run initialization and health check
        ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} '
          cd ~/frankenstein-db &&
          python3 -c "
          import asyncio
          from src import FrankensteinDB

          async def init_check():
              db = FrankensteinDB()
              health = await db.get_system_health()
              print(f\"Production DB Health: {health}\")
              await db.close()

          asyncio.run(init_check())
          "
        '

        echo '✅ Production deployment completed successfully!'